// @title           Media Server API
// @version         1.0
// @description     This is the API for my media streaming server
// @termsOfService  http://example.com/terms/

// @contact.name   Benson
// @contact.email  nwankwobenson29@gmail.com

// @license.name  MIT
// @license.url   https://opensource.org/licenses/MIT

// @host      localhost:8000
// @BasePath  /
package main

import (
	"fmt"
	database "media_server/internal/db"
	handlers "media_server/internal/handlers"
	"media_server/internal/logger"
	"media_server/internal/media"
	"net"
	"net/http"
	"strconv"

	"sync"

	"github.com/go-chi/chi/v5"
	"github.com/go-chi/cors"
	"gorm.io/gorm"

	_ "media_server/docs" // docs generated by swag init

	httpSwagger "github.com/swaggo/http-swagger"
)

func main() {
	const PORT int = 8000
	addr := ":" + strconv.Itoa(PORT)
	var mut sync.Mutex
	var wg sync.WaitGroup
	wg.Add(1)
	logger.InitLogger(true)
	config, err := media.LoadConfig("config.json")
	if err != nil {
		logger.Log().Sugar().Error("failed to load config")
	}
	logger.Log().Sugar().Info("loaded config sucesfully")

	media_files, err := media.ScanMediaDirs(*config)
	if err != nil {
		logger.Log().Sugar().Errorf("failed to scan media %v\n", err)
		return
	}

	db, err := database.InitDataBase("media.db")
	if err != nil {
		logger.Log().Sugar().Errorf("failed to create db: %v \n", err)
		return
	}

	go func() {
		defer wg.Done()
		if err := syncDatabase(&media_files, &mut, db); err != nil {
			logger.Log().Sugar().Panicf("failed to sync db: %v", err)
			return
		}
	}()
	logger.Log().Info("Syncing database")
	addrs, err := net.InterfaceAddrs()
	if err != nil {
		logger.Log().Sugar().Errorf("failed to get network interfaces: %v", err)
		return
	}
	var allowedOrigin string
	var allowedOrigin2 string
	for _, addr := range addrs {
		if ipNet, ok := addr.(*net.IPNet); ok && !ipNet.IP.IsLoopback() {
			if ip := ipNet.IP.To4(); ip != nil {
				allowedOrigin = fmt.Sprintf("http://%s:4173", ip.String())
				allowedOrigin2 = fmt.Sprintf("http://%s:5173", ip.String())
				break
			}
		}
	}
	if allowedOrigin == "" {
		panic("no local IP found")
	}

	router := chi.NewRouter()
	handle := handlers.Handler{DB: db, Logger: logger.Log()}

	router.Use(cors.Handler(cors.Options{
		// AllowedOrigins:   []string{"https://foo.com"}, // Use this to allow specific origin hosts
		AllowedOrigins: []string{"http://localhost:5173", "http://127.0.0.1:5173", "http://localhost:4173", "http://127.0.0.1:4173", allowedOrigin, allowedOrigin2, "http://127.0.0.1:8000", "http://localhost:8000", "http://localhost:8080"},
		Debug:          true,
		// AllowOriginFunc:  func(r *http.Request, origin string) bool { return true },
		AllowedMethods:   []string{"GET", "POST", "PUT", "DELETE", "OPTIONS"},
		AllowedHeaders:   []string{"Accept", "Authorization", "Content-Type", "X-CSRF-Token"},
		ExposedHeaders:   []string{"Link"},
		AllowCredentials: false,
		MaxAge:           86400, // Maximum value not ignored by any of major browsers
	}))
	router.Get("/media/all", handle.GetAll)
	router.Get("/media/{id}/stream", handle.StreamMedia)
	router.Get("/media/paginated", handle.GetPaginatedHandler)
	router.Get("/media/{id}", handle.GetByID)
	router.Get("/media/{id}/thumbnail", handle.ThumbnailHandler)
	router.Get("/docs/*", httpSwagger.Handler(
		httpSwagger.URL("http://localhost:8000/docs/doc.json"), // CORRECT
	))

	logger.Log().Sugar().Infof("server started on http://127.0.0.1%v \n", addr)
	logger.Log().Sugar().Infof("server started on http://127.0.0.1%v/docs/ \n", addr)
	if err := http.ListenAndServe(addr, router); err != nil {
		logger.Log().Sugar().Errorf("server failed to start %v\n", err)
		return
	}
	wg.Wait()
}
func syncDatabase(media_files *[]media.MediaFile, mut *sync.Mutex, db *gorm.DB) error {
	for _, media := range *media_files {
		if _, err := database.GetByID(db, media.ID); err != nil {
			mut.Lock()
			err := database.AddMediaItem(db, &database.MediaItem{
				ID:   media.ID,
				Name: media.Name,
				Path: media.Path,
				Ext:  media.Ext,
			})
			if err != nil {
				logger.Log().Error("wrting an entry to the db failed")
				return err
			}
			mut.Unlock()
			logger.Log().Info("database entry succesfull")
		}
	}
	return nil
}
