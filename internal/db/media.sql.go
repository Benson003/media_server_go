// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: media.sql

package db

import (
	"context"
	"database/sql"
)

const getAllMedia = `-- name: GetAllMedia :many
SELECT id, name, path, ext FROM media
`

func (q *Queries) GetAllMedia(ctx context.Context) ([]Medium, error) {
	rows, err := q.db.QueryContext(ctx, getAllMedia)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Medium
	for rows.Next() {
		var i Medium
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Path,
			&i.Ext,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMediaByID = `-- name: GetMediaByID :one
SELECT id, name, path, ext FROM media WHERE id = ?
`

func (q *Queries) GetMediaByID(ctx context.Context, id string) (Medium, error) {
	row := q.db.QueryRowContext(ctx, getMediaByID, id)
	var i Medium
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Path,
		&i.Ext,
	)
	return i, err
}

const insertMedia = `-- name: InsertMedia :exec
INSERT INTO media (id, name, path, ext) VALUES (?, ?, ?, ?)
`

type InsertMediaParams struct {
	ID   string
	Name string
	Path string
	Ext  sql.NullString
}

func (q *Queries) InsertMedia(ctx context.Context, arg InsertMediaParams) error {
	_, err := q.db.ExecContext(ctx, insertMedia,
		arg.ID,
		arg.Name,
		arg.Path,
		arg.Ext,
	)
	return err
}
